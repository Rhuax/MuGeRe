#Batch Size: 128
#Epochs: 60
#Training set normalization: ON

#Pesi ridotti come in T1 ma con kernel initializer, altro layer dense come T2 e dropout

model = Sequential()

model.add(Conv2D(input_shape=(160, 150, 3), filters=32, kernel_size=(2,2), strides=(2,2), activation="elu", kernel_initializer='glorot_normal'))
model.add(Dropout(0.5))
model.add(Conv2D(filters=64, kernel_size=(2,2), strides=(2,2),activation="elu", kernel_initializer='glorot_normal'))

model.add(MaxPooling2D(pool_size=(2, 2), strides=2))

model.add(Conv2D(filters=128, kernel_size=(2,2), strides=(2,2), activation="elu", kernel_initializer='glorot_normal'))
model.add(Dropout(0.5))
model.add(Conv2D(filters=256, kernel_size=(2,2), strides=(2,2), activation="elu", kernel_initializer='glorot_normal'))

model.add(MaxPooling2D(pool_size=(2, 2), strides=2))
model.add(Flatten())

model.add(Dense(512, activation='elu', kernel_initializer='glorot_normal'))
model.add(Dropout(0.5))

model.add(Dense(128, activation='elu', kernel_initializer='glorot_normal'))
model.add(Dropout(0.5))

model.add(Dense(num_classes, activation='softmax'))

#################

model.compile(loss='categorical_crossentropy',

              optimizer='rmsprop',

              metrics=['accuracy'])
'''
@@@Results@@@
	30 epochs ---> loss: 1.2557 - acc: 0.5969 - val_loss: 1.5150 - val_acc: 0.5298
	60 epochs ---> loss: 1.1375 - acc: 0.6325 - val_loss: 1.6570 - val_acc: 0.5315
'''