#Batch Size: 128
#Epochs: 30
#Training set normalization: ON

#Fino a dense_1 il modello è preaddestrato da T5

model = Sequential()

model.add(Conv2D(input_shape=(160, 150, 3), filters=32, kernel_size=(3,3), strides=(3,3), activation="elu", kernel_initializer='glorot_normal', name='conv2d_1'))
model.add(Conv2D(filters=64, kernel_size=(2,2), strides=(2,2),activation="elu", kernel_initializer='glorot_normal', name='conv2d_2'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_1'))
model.add(Conv2D(filters=128, kernel_size=(2,2), strides=(2,2), activation="elu", kernel_initializer='glorot_normal', name='conv2d_3'))
model.add(Flatten())
model.add(Dropout(0.5))
model.add(Dense(512, activation='elu', kernel_initializer='glorot_normal', name='dense_1'))
model.add(Reshape((8, 8, 8)))
model.add(Conv2D(filters=32, kernel_size=(2,2), strides=(2,2),activation="elu", kernel_initializer='glorot_normal', name='conv2d_4'))
model.add(MaxPooling2D(pool_size=(2, 2), strides=2, name='max_pooling2d_2'))
model.add(Dense(128, activation='elu', kernel_initializer='glorot_normal', name='dense_3'))
model.add(Flatten())
model.add(Dense(num_classes, activation='softmax', name='dense_f'))

#Compile model

optimizer = 'adam'

model.compile(loss='categorical_crossentropy',

              optimizer=optimizer,

              metrics=['accuracy'])

@@@RESULTS@@@
loss: 0.2678 - acc: 0.9070 - val_loss: 2.7482 - val_acc: 0.5233
